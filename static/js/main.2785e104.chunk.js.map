{"version":3,"sources":["reportWebVitals.ts","components/AppTheme.tsx","components/AppName.tsx","components/Emote.tsx","components/AppFooter.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","userTheme","localStorage","getItem","AppTheme","useState","isThemeHidden","setIsThemeHidden","themeRef","useRef","onClickOutsideTheme","event","current","contains","target","document","body","className","useEffect","addEventListener","removeEventListener","themeElement","themeList","map","theme","onClick","setItem","saveSelectedTheme","id","onMouseEnter","name","ref","AppName","props","titleClicked","title","lastIndex","getRandomEmote","i","Math","floor","random","emotes","length","EmoteComponent","emoteTextRef","emote","setEmote","tooltip","setTooltip","useImperativeHandle","randomEmote","copyTimeout","isHidden","setHidden","copyArea","value","onChange","rows","cols","window","setTimeout","select","setSelectionRange","execCommand","blur","clearTimeout","onMouseOut","Emote","forwardRef","AppFooter","rel","href","githublink","link","App","emoteRef","ReactDOM","render","StrictMode","getElementById"],"mappings":"6nCAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qCCOd,SAASQ,IACP,OAAOC,aAAaC,QAAQ,UAAY,aAGnC,IAAMC,EAAW,WACtB,MAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACMC,EAAWC,iBAA8B,MAM/C,SAASC,EAAoBC,GACvBH,EAASI,UAAYJ,EAASI,QAAQC,SAASF,EAAMG,UACvDC,SAASC,KAAKC,UAAYhB,IAC1BM,GAAiB,IAPrBW,qBAAU,WACRH,SAASC,KAAKC,UAAYhB,MACzB,IASHiB,qBAAU,WAER,OADAH,SAASI,iBAAiB,YAAaT,GAChC,WACLK,SAASK,oBAAoB,YAAaV,MAE3C,CAACF,IAGJ,IAAMa,EAAeC,EAClBC,KAAI,SAAAC,GAAK,OACR,mBAEEC,QAAS,YApCjB,SAA2BD,GACzBtB,aAAawB,QAAQ,QAASF,GAC9BT,SAASC,KAAKC,UAAYO,EAmClBG,CAAkBH,EAAMI,IACxBrB,GAAiB,IAEnBsB,aAAc,WACZd,SAASC,KAAKC,UAAYO,EAAMI,IAPpC,SAUGJ,EAAMM,MATFN,EAAMM,SAajB,OACE,sBAAKb,UAAU,iBAAf,UACE,mBACEA,UAAU,WACVQ,QAAS,WACPlB,GAAiB,IAHrB,mBAOED,EACE,GAEA,qBACEW,UAAU,gBACVc,IAAKvB,EAFP,SAIGa,QC/DAW,G,MAA8B,SAACC,GAC1C,IAAQC,EAAiBD,EAAjBC,aAER,OACE,sBAAKjB,UAAU,WAAf,UACE,qBAAKA,UAAU,YACf,qBAAKA,UAAU,SAAf,SACE,oBAAIA,UAAU,qBACZQ,QAASS,EADX,SAEED,EAAME,UAGV,qBAAKlB,UAAU,UAAf,SACE,cAAC,EAAD,W,OCAJmB,G,MAAY,GAChB,SAASC,IACP,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWC,EAAOC,QAK1C,OAJIP,GAAaE,IACfA,EAAKA,EAAII,EAAOC,OAAUL,IAAMA,IAChCF,EAAYE,GAEPI,EAAOJ,GAGhB,SAASM,EAAeX,EAAoBF,GAC1C,IAAMc,EAAepC,iBAAmC,MACxD,EAA0BJ,mBAASgC,KAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAA8B1C,mBAAS,QAAvC,mBAAO2C,EAAP,KAAgBC,EAAhB,KAGAC,8BAAoBnB,GAAK,iBAAO,CAAEoB,kBAClC,IAcIC,EAdED,EAAc,WAClBJ,EAASV,MAGX,EAA8BhC,oBAAS,GAAvC,mBAAOgD,EAAP,KAAiBC,EAAjB,KACMC,EAAyB,0BAC7B3B,GAAG,kBACH4B,MAAOV,EAAMA,MACbf,IAAKc,EACLY,SAAU,aACVC,KAAM,GACNC,KAAM,KAMR,OACE,qBAAK1C,UAAU,kBAAf,SACE,sBAAKA,UAAU,aACbQ,QAAS,WACF2B,IACHE,GAAU,GACVF,EAAcQ,OAAOC,YACnB,WAAO,IAAD,MACJ,UAAAhB,EAAajC,eAAb,SAAsBkD,SACtB,UAAAjB,EAAajC,eAAb,SAAsBmD,kBAAkB,EAAG,OAC3ChD,SAASiD,YAAY,QACrBf,EAAW,WAEX,UAAAJ,EAAajC,eAAb,SAAsBqD,OAEtBX,GAAU,GACVY,aAAad,KAlBA,MAuBrBe,WAAY,kBAAMlB,EAAW,SAnB/B,UAoBE,sBAAMrB,GAAG,gBAAgBX,UAAU,WAAnC,SAA+C6B,EAAMA,QACpDO,EAAW,GAAKE,EACjB,sBAAMtC,UAAU,yBAAhB,SAA0C+B,SAM3C,IAAMoB,EAAQC,qBAAWzB,GCjFzB,SAAS0B,EAAUrC,GACxB,OACE,sBAAKhB,UAAU,sBAAf,UACE,mBACEkB,MAAM,yBACNoC,IAAI,aACJzD,OAAO,SACP0D,KAAMvC,EAAMwC,WAAaxC,EAAMwC,WAAa,IAJ9C,+BAMA,qCACA,mBAAGtC,MAAM,sBACPoC,IAAI,aACJzD,OAAO,SACP0D,KAAMvC,EAAMyC,KACZ9C,GAAG,cAJL,SAIoBK,EAAMH,UChBzB,SAAS6C,IACd,IAAMC,EAAWnE,iBAAkB,MAEnC,OACE,sBAAKQ,UAAU,MAAf,UACE,cAAC,EAAD,CACEkB,MAAO,UACPD,aAAc,kCAAM0C,EAAShE,eAAf,aAAM,EAAkBuC,iBAExC,cAACiB,EAAD,CAAOrC,IAAK6C,IACZ,cAACN,EAAD,CACEI,KAAK,8BACL5C,KAAK,qBACL2C,WAAW,iDCXnBI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACJ,EAAD,MAEF5D,SAASiE,eAAe,SAG1BxF,M","file":"static/js/main.2785e104.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import {\n  ReactElement,\n  useEffect,\n  useRef,\n  useState\n} from 'react'\n\nimport themeList from '../assets/theme.json'\n\nimport '../styles/theme-dropdown.css'\n\nfunction saveSelectedTheme(theme: string) {\n  localStorage.setItem('theme', theme)\n  document.body.className = theme\n}\n\nfunction userTheme() {\n  return localStorage.getItem('theme') || 'auto-theme'\n}\n\nexport const AppTheme = (): ReactElement => {\n  const [isThemeHidden, setIsThemeHidden] = useState(true)\n  const themeRef = useRef<HTMLDivElement | null>(null)\n\n  useEffect(() => {\n    document.body.className = userTheme()\n  }, [])\n\n  function onClickOutsideTheme(event: MouseEvent) {\n    if (themeRef.current && !themeRef.current.contains(event.target as Node)) {\n      document.body.className = userTheme()\n      setIsThemeHidden(true)\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('mousedown', onClickOutsideTheme)\n    return () => {\n      document.removeEventListener('mousedown', onClickOutsideTheme)\n    }\n  }, [themeRef])\n\n  // Create the dropdown element from JSON list\n  const themeElement = themeList\n    .map(theme =>\n      <p\n        key={theme.name}\n        onClick={() => {\n          saveSelectedTheme(theme.id)\n          setIsThemeHidden(true)\n        }}\n        onMouseEnter={() => {\n          document.body.className = theme.id\n        }}\n      >\n        {theme.name}\n      </p>\n    )\n\n  return (\n    <div className=\"theme-dropdown\">\n      <p\n        className=\"noselect\"\n        onClick={() => {\n          setIsThemeHidden(false)\n        }}\n      >theme</p>\n      {\n        isThemeHidden ?\n          ''\n          :\n          <div\n            className=\"theme-content\"\n            ref={themeRef}\n          >\n            {themeElement}\n          </div>\n      }\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\n\n// import { refreshIcon } from '../assets/icons'\nimport { AppTheme } from './AppTheme'\n\nimport '../styles/header.css'\n\ninterface IAppName {\n  title: string\n  titleClicked?: () => void\n}\n\nexport const AppName: React.FC<IAppName> = (props): ReactElement => {\n  const { titleClicked } = props\n\n  return (\n    <div className=\"app-name\">\n      <div className=\"options\"></div>\n      <div className=\"center\">\n        <h1 className=\"app-title noselect\"\n          onClick={titleClicked}\n        >{props.title}</h1>\n        {/* <button className=\"refresh-btn\">{refreshIcon}</button> */}\n      </div>\n      <div className=\"options\">\n        <AppTheme />\n      </div>\n    </div>\n  )\n}\n","import {\n  ReactElement,\n  useState,\n  useRef,\n  Ref,\n  useImperativeHandle,\n  forwardRef\n} from 'react'\n\nimport emotes from '../assets/emotes.json'\n\nimport '../styles/emote.css'\n\nexport interface IEmoteProps {\n  title?: string\n}\n\nexport interface IEmoteRef {\n  randomEmote: () => void\n}\n\ninterface IEmote {\n  emote: string\n}\n\nlet lastIndex = 0\nfunction getRandomEmote(): IEmote {\n  let i = Math.floor(Math.random() * emotes.length)\n  if (lastIndex == i) {\n    i = (i < emotes.length) ? i++ : i--\n    lastIndex = i\n  }\n  return emotes[i]\n}\n\nfunction EmoteComponent(props: IEmoteProps, ref: Ref<IEmoteRef>): ReactElement {\n  const emoteTextRef = useRef<HTMLTextAreaElement | null>(null)\n  const [emote, setEmote] = useState(getRandomEmote()) // e\n  const [tooltip, setTooltip] = useState('Copy')\n\n  // Bind the randomEmote function\n  useImperativeHandle(ref, () => ({ randomEmote }))\n  const randomEmote = () => {\n    setEmote(getRandomEmote())\n  }\n\n  const [isHidden, setHidden] = useState(true)\n  const copyArea: ReactElement = <textarea\n    id=\"emote-copy-area\"\n    value={emote.emote}\n    ref={emoteTextRef}\n    onChange={() => { return }}\n    rows={24}\n    cols={80}\n  ></textarea>\n\n  let copyTimeout: number       // timeout id\n  const COPY_TIMEOUT_DELAY = 10 // ms\n\n  return (\n    <div className=\"emote-container\">\n      <div className=\"emote-copy\"\n        onClick={() => {\n          if (!copyTimeout) {\n            setHidden(false)\n            copyTimeout = window.setTimeout(\n              () => {\n                emoteTextRef.current?.select()\n                emoteTextRef.current?.setSelectionRange(0, 99999)\n                document.execCommand('copy')\n                setTooltip('Copied!')\n\n                emoteTextRef.current?.blur()\n\n                setHidden(true)\n                clearTimeout(copyTimeout)\n              },\n              COPY_TIMEOUT_DELAY)\n          }\n        }}\n        onMouseOut={() => setTooltip('Copy')}>\n        <span id=\"emote-display\" className=\"noselect\">{emote.emote}</span>\n        {isHidden ? '' : copyArea}\n        <span className=\"emote-tooltip noselect\">{tooltip}</span>\n      </div>\n    </div >\n  )\n}\n\nexport const Emote = forwardRef(EmoteComponent)\n","import { ReactElement } from 'react'\n\ninterface IAppFooter {\n  link: string\n  name: string\n  githublink?: string\n}\n\nexport function AppFooter(props: IAppFooter): ReactElement {\n  return (\n    <div className=\"app-footer noselect\" >\n      <a\n        title=\"Github repository link\"\n        rel=\"noreferrer\"\n        target=\"_blank\"\n        href={props.githublink ? props.githublink : '/'}\n      >Github Repository</a>\n      <span>|</span>\n      <a title=\"Github profile link\"\n        rel=\"noreferrer\"\n        target=\"_blank\"\n        href={props.link}\n        id=\"github-link\">{props.name}</a>\n    </div >\n  )\n}\n","import { useRef } from 'react'\n\nimport { AppName } from './components/AppName'\nimport { Emote, IEmoteRef } from './components/Emote'\nimport { AppFooter } from './components/AppFooter'\n\nexport function App(): JSX.Element {\n  const emoteRef = useRef<IEmoteRef>(null)\n\n  return (\n    <div className=\"app\">\n      <AppName\n        title={'./emote'}\n        titleClicked={() => emoteRef.current?.randomEmote()}\n      />\n      <Emote ref={emoteRef} />\n      <AppFooter\n        link='https://github.com/KTheXIII'\n        name='2021 © KTheXIII'\n        githublink='https://github.com/KTheXIII/emote-reactjs'\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\n\nimport './styles/main.css'\n\nimport { App } from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}