{"version":3,"sources":["reportWebVitals.ts","components/AppThemeDropdown.tsx","components/AppName.tsx","components/Emote.tsx","components/AppFooter.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AppThemeDropdown","useState","isThemeHidden","setIsThemeHidden","themeRef","useRef","onClickOutsideTheme","event","current","contains","target","useEffect","userTheme","localStorage","getItem","document","body","className","addEventListener","removeEventListener","themeElement","themeList","map","theme","onClick","setItem","saveSelectedTheme","id","name","ref","AppName","props","titleClicked","title","lastIndex","getRandomEmote","i","Math","floor","random","emotes","length","emote","EmoteComponent","emoteTextRef","setEmote","tooltip","setTooltip","useImperativeHandle","randomEmote","copyTimeout","isHidden","setHidden","copyArea","value","onChange","rows","cols","onKeyPress","e","preventDefault","window","setTimeout","select","setSelectionRange","execCommand","blur","clearTimeout","onMouseOut","Emote","forwardRef","AppFooter","rel","href","githublink","link","App","emoteRef","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bd86622b.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import {\n  ReactElement,\n  useEffect,\n  useRef,\n  useState\n} from 'react'\n\nimport themeList from '../assets/theme.json'\n\nimport '../styles/theme-dropdown.css'\n\nfunction saveSelectedTheme(theme: string) {\n  localStorage.setItem('userTheme', theme)\n  document.body.className = theme\n}\n\nexport const AppThemeDropdown = (): ReactElement => {\n  const [isThemeHidden, setIsThemeHidden] = useState(true)\n  const themeRef = useRef<HTMLDivElement | null>(null)\n\n  useEffect(() => {\n    // Load the user stored theme\n    const userTheme = localStorage.getItem('userTheme')\n    if (userTheme) {\n      document.body.className = userTheme\n    }\n  }, [])\n\n  function onClickOutsideTheme(event: MouseEvent) {\n    if (themeRef.current && !themeRef.current.contains(event.target as Node)) {\n      setIsThemeHidden(true)\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('mousedown', onClickOutsideTheme)\n    return () => {\n      document.removeEventListener('mousedown', onClickOutsideTheme)\n    }\n  }, [themeRef])\n\n  // Create the dropdown element from JSON list\n  const themeElement = themeList\n    .map(theme => <p key={theme.name} onClick={() => {\n      saveSelectedTheme(theme.id)\n      setIsThemeHidden(true)\n    }}>\n      {theme.name}\n    </p>)\n\n  return (\n    <div className=\"theme-dropdown\">\n      <p\n        className=\"noselect\"\n        onClick={() => {\n          setIsThemeHidden(false)\n        }}\n      >theme</p>\n      {\n        isThemeHidden ?\n          ''\n          :\n          <div\n            className=\"theme-content\"\n            ref={themeRef}\n          >\n            {themeElement}\n          </div>\n      }\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\nimport { AppThemeDropdown } from './AppThemeDropdown'\n\ninterface IAppName {\n  title: string\n  titleClicked?: () => void\n}\n\nexport const AppName: React.FC<IAppName> = (props): ReactElement => {\n  const { titleClicked } = props\n\n  return (\n    <div className=\"app-name\">\n      <div className=\"options\"></div>\n      <h1 className=\"app-title noselect\"\n        onClick={titleClicked}\n      >{props.title}</h1>\n      <div className=\"options\">\n        <AppThemeDropdown />\n      </div>\n    </div>\n  )\n}\n","import {\n  ReactElement,\n  useState,\n  useRef,\n  Ref,\n  useImperativeHandle,\n  forwardRef\n} from 'react'\n\nimport emotes from '../assets/emotes.json'\n\nexport interface IEmoteProps {\n  title?: string\n}\n\nexport interface IEmoteRef {\n  randomEmote: () => void\n}\n\nlet lastIndex = 0\nfunction getRandomEmote() {\n  let i = Math.floor(Math.random() * emotes.length)\n  if (lastIndex == i) {\n    i = (i < emotes.length) ? i++ : i--\n    lastIndex = i\n  }\n  return emotes[i].emote\n}\n\nfunction EmoteComponent(props: IEmoteProps, ref: Ref<IEmoteRef>): ReactElement {\n  const emoteTextRef = useRef<HTMLTextAreaElement | null>(null)\n  const [emote, setEmote] = useState(getRandomEmote()) // e\n  const [tooltip, setTooltip] = useState('Copy')\n\n  // Bind the randomEmote function\n  useImperativeHandle(ref, () => ({ randomEmote }))\n  const randomEmote = () => {\n    setEmote(getRandomEmote())\n  }\n\n  const [isHidden, setHidden] = useState(true)\n  const copyArea = <textarea\n    id=\"emote-copy-area\"\n    value={emote}\n    ref={emoteTextRef}\n    onChange={() => { return }}\n    rows={24}\n    cols={80}>\n  </textarea>\n\n  let copyTimeout: number       // timeout id\n  const COPY_TIMEOUT_DELAY = 10 // ms\n\n  return (\n    <div className=\"emote-container\"\n      onKeyPress={e => {\n        e.preventDefault()\n      }}\n    >\n      <div className=\"emote-copy\"\n        onClick={() => {\n          if (!copyTimeout) {\n            setHidden(false)\n\n            copyTimeout = window.setTimeout(() => {\n              emoteTextRef.current?.select()\n              emoteTextRef.current?.setSelectionRange(0, 99999)\n              document.execCommand('copy')\n              setTooltip('Copied!')\n\n              emoteTextRef.current?.blur()\n\n              setHidden(true)\n              clearTimeout(copyTimeout)\n            }, COPY_TIMEOUT_DELAY)\n          }\n        }}\n        onMouseOut={() => { setTooltip('Copy') }}>\n        <span id=\"emote-display\" className=\"noselect\">{emote}</span>\n        {isHidden ? '' : copyArea}\n        <span className=\"emote-tooltip noselect\">{tooltip}</span>\n      </div>\n    </div >\n  )\n}\n\nexport const Emote = forwardRef(EmoteComponent)\n","import { ReactElement } from 'react'\n\ninterface IAppFooter {\n  link: string\n  name: string\n  githublink?: string\n}\n\nexport function AppFooter(props: IAppFooter): ReactElement {\n  return (\n    <div className=\"app-footer noselect\" >\n      <a\n        title=\"Github repository link\"\n        rel=\"noreferrer\"\n        target=\"_blank\"\n        href={props.githublink ? props.githublink : '/'}\n      >Github Repository</a>\n      <span>|</span>\n      <a title=\"Github profile link\"\n        rel=\"noreferrer\"\n        target=\"_blank\"\n        href={props.link}\n        id=\"github-link\">{props.name}</a>\n    </div >\n  )\n}\n","import { useRef } from 'react'\nimport { AppName } from './components/AppName'\nimport { Emote, IEmoteRef } from './components/Emote'\nimport { AppFooter } from './components/AppFooter'\n// import { AppAddCustom } from './components/AppAddCustom'\n\nexport function App(): JSX.Element {\n  const emoteRef = useRef<IEmoteRef>(null)\n\n  return (\n    <div className=\"app\">\n      <AppName\n        title={'./emote'}\n        titleClicked={() => emoteRef.current?.randomEmote()}\n      />\n      <Emote ref={emoteRef} />\n      {/* <AppAddCustom /> */}\n      <AppFooter\n        link='https://github.com/KTheXIII'\n        name='2021 © KTheXIII'\n        githublink='https://github.com/KTheXIII/emote-reactjs'\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\n\nimport './styles/main.css'\n\nimport { App } from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}